MLNM-ONE documentation

Copyright 2013 Unincorporated Media

Introduction

	MLNM-ONE is an open source 3D video game engine. It uses Python for scripting. The sceans are voxelized and rendered
using voxel cone tracing.

Features of the engine:

	1. Advanced graphical capabilities:

		A. Voxel Cone Tracing
		B. Parralax Mapping
		C. Volumetric Particles
		D. X3D
		E. Translucency
		F. Reflection and Refraction

	2. Realistic Physics:

		A. Voxel Based Collision
		B. Cloth Simulation
		C. Fur Simulation
		D. Fluid Simulation

	3. Python Scripting

	4. Large Environments


Part One: Graphics Engine

	MLNM-ONE uses a system known as GigaVoxels. In fact, much of the engine is based around it. GigaVoxels is very
efficient, it can be used to store voxels (like the volumetric particles we will discuss later) and meshes voxelized on the
fly. GigaVoxels' partner is Voxel Cone Tracing. Voxel Cone Tracing (or VCT for short) is a revolutionary new rendering method
(as of 2013) that allows for global illumination, color bleeding, ambient occlusion, dynamic lighting, and reflections all
in real time.
	Some changes will have to be made to the rendering engine as implemented by the inventors. These changes are small
but they will greatly increase the power of the rendering engine. For one, we will have to add paralax mapping; it will
be made to affect collision rather than just rendering. Also, we need translucency. Additionaly we need NURBS, refraction
and arbitrary light bounces. This can be used to make the engine run better on slower computers and look better on faster
computers.
	In the thesis VCT uses CUDA and OpenGL 4. This limits the engine to only recent NVIDIA cards. I believe that
GLSL could be used to impliment the rendering engine. Also, we could have multiple versions of the renderer specific to the
users setup. There will also be two extra renderers for the editor, one with marching cubes generated wireframe, and another
with view directed lighting as seen in the GigaVoxels tech demos. Users on servers or very powerful computers can use the
software renderer.

         +-----------+        +----------+
         |   Client  |        |  Server  |
         |Sends out: |        |Screen out|
         |Input      +--------+-----+----+
         |*Screen res|              |
         |*Keymap    |              |
         +-----------+         +----+----+
                               |  Client |
                               +---------+

	The software renderer uses distributed computing across a network of computers in a multiplayer game. When a client
connects to a server it sends out the its screen resolution and keymap. Keymaps are not implimented in the engine but scripted
by the game developer so, sending out the keymap would also need to be scripted. As a player provides input, such as keypress,
mouse movement and voice, it is sent to the server for processing. The server sends back screen out to the appropriat client.

	Non-textured materials have nine properties. These properties are: Red, Green, Blue, Transparency, Reflectivity,
IOR, emmisivness, translucency, and roughness. Internal representation of materials is similar to UNIX file permissions.
The values of all attributes are in one integer. Here is a graph of it with only RGB with 8 bits:

                 000000000000111111111111
                 |      ||      ||      |  This would mean that the value of this material would be 4095
                 +------++------++------+
                  Blue    Green    Red

In acctuality the materials will have material_bit_depth*9 bits. By default each attribute will be 8, this will mean that 2^72
unique materials.
